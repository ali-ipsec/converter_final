#include "delay.h"
#include "stdio.h"
#include "stdlib.h"
#include "spi.h"
#include "math.h"
//frame 240ms pulse_pos 80ms rest_pos 40ms pulse_neg 80ms rest_neg 40ms
// parametrize program
/*
    to run test program comment CALIB_ENABLE and DEBUG uncommenct TEST_PROGRAM
    to run calibration program comment TEST_PROGRAM , DEBUG uncomment CALIB_ENABLE
    to calib manually comment lines CALIB_ENABLE,TEST_PROGRAM uncomment DEBUG
*/ 
//#define TEST_PROGRAM
//#define DEBUG
#define CS          PORTB.4
#define L298_I1     PORTA.1
#define L298_I2     PORTA.2
#define L298_EN     PORTA.3
//#define LED_G       PORTC.3
#define LED         PORTC.4
#define DIRECTION   PORTD.6
#define EMPTY_PIPE  PORTD.7



#define FACTORY_TEST   PIND.2   // C1  R31
#define DEBUG_CHECK    PIND.4   // C3  R32
#define START_MEASUREMENT 0
#define TIME_DETECT       1
#define STOP_MEASUREMENT  2


#define TIMER_ON    0x03 // 187.5 / 2 = 93.75 min 85Khz
#define TIMER_OFF   0x00       
#define ADC_VREF_TYPE 0x00
// pulse generation time
#define PULSE_DURATION  100
#define REST_DURATION   60
#define SAMPLE_DURATION 20
#define CURRENT_SAMPLE_DURATION 5
#define TIME_MASURE_LIMIT_CNTR 1000/(PULSE_DURATION*2)

#define LITER_PER_PULSE 10000.0
#define MAX_ELEMENT_CNT 8
#define SERIAL_ADDR      0x01
#define GAIN_ADDR        0x05
#define OFFSET_ADDR      0x09
#define CURR_ADDR        0x0D
#define CUTT_OFF_ADDR    0x11
#define PULSE_WIDTH_VALID 0x15
#define PULSE_WIDTH_ADDR 0x16
#define WINDOW_SIZE_VALID_ADDR 0x17
#define WINDOW_SIZE_ADDR 0x18
#define EP_SAMPLES_LIMIT_VALID_ADDR 0x19
#define EP_SAMPLES_LIMIT_ADDR 0x1a 
#define EP_PULSE_MAX_VALUE_LIMIT_VALID_ADDR 0x1b
#define EP_PULSE_MAX_VALUE_LIMIT_ADDR 0x1c 
#define SIGN_VALID_ADDR   0x1d
#define SIGN_ADDR   0x1e

#define EP_MEASUREMENT 3
#define NO_EP       0
#define PULSE_LEVEL 1
#define DBI_VALUE 2
#define SAMPLE_DIFF_LEVEL 3


#define SERIAL_NUMBER    12345678
#define SHIFT_LENGHT_MAX 22
#define SHIFT_DETERMINED_LENGTH  8
#define EP_PULSE_MAX_VALUE_LIMIT      3900
#define EP_SAMPLES_LIMIT    250
#define CUTT_OFF 0.5
#define VERSION 4.0
//#define RANGE_2   // above 2.5inch 
#ifdef RANGE_2
    #define TIMER_PRESCALE 0x03  // divide by 4
    #define TIMER_DIVIDER 3.9263    
#else
    #define TIMER_PRESCALE 0x05  // divide by 4
    #define TIMER_DIVIDER 62.821//64    
#endif

    
unsigned char sample_ready_flag = 0; 
unsigned char zeroAdjusting = 0, startSendingDiffValues = 0, stopSendingDiffValues = 0, 
            flewValueChanged = 0, reade2prom1 = 0, reade2prom2 = 0 ,db_monitoring = 0, offset_changed = 0, 
            send_offset = 0, calibration_applied = 0, ref_sensor_pulse_measurement_started = 0, 
            ref_sensor_pulse_measurement_stopped = 0, measure_Q3_calib = 0, measure_Q2_calib = 0,
            accuracy_measurement = 0, measure_Q3_calib_send_data = 0, measure_Q2_calib_send_data = 0,
            accuracy_measurement_send_data = 0, pulse_is_detected = 0, calibration_changed = 0,
            wd_monitoring = 0, wd_test = 0, serial_number_applied = 0, min_max_cnt_cmd = 0,
            current_sample_min = 0, current_sample_max = 0, PulseWidthSettingApplied = 0, cutt_off_changed = 0, start_fout_test = 0, stop_fout_test = 0,
            windowSizeChanged = 0, windowSize = 0, windowSizeTemp = 0, insert_idx = 0,
            respose_uart_activity = 0,ep_positive_pulse_measurement = 0, ep_negative_pulse_measurement = 0, ep_check_cmd = 0,
            ep_change_diff_samples_limit_flag = 0, ep_change_pulse_limit_flag = 0, inverseSignCmd = 0;
             
            
unsigned char read_max_samples = 0, read_min_samples = 0, pulseWidthTemp = 0, generate_fout_test = 0 ;
float dbi_final = 0, offset = 0, dbi_added_value = 0, gain = 0, pulse_duration_1 = 0,
         dbi_Q3 = 0, diff_Q3 = 0, dbi_Q2 = 0, diff_Q2 = 0, sum_avg_sum_min = 0, sum_avg_sum_max = 0, sum_avg_curr_sum_max= 0, sum_avg_curr_sum_min = 0,
         avg_curr_sum_max = 0, eeprom_avg_curr_sum_max = 0, cutt_off = 0 ;
signed char signValue = 1;    
signed int pulseMaxValuesLimit = 0, diffSamplesLimit = 0;     
unsigned long int ovf_timer0_cnt = 0, pulse_edge_cnt = 0, eeprom_serial_num = 0;
unsigned char db_changed = 0, pulseWidth = 0;

void process_rx_buffer(void);
void sendParamsMinMax(float * send_arr, unsigned char element_cnt);
void sendParamsFloat(float * send_arr, unsigned char element_cnt);
void send_f(float);
//void sendAckResponse();
void time2_init();
// read adc

signed int read_adc(unsigned char adc_input)
{

    ADMUX= adc_input | (ADC_VREF_TYPE & 0xff);
    // Delay needed for the stabilization of the ADC input voltage
    delay_us(10);
    // Start the AD conversion
    ADCSRA|=0x43;
    // Wait for the AD conversion to complete
    while ((ADCSRA & 0x10)==0);
    ADCSRA|=0x10;
    return ADCW & 0x3FF;
}
signed long int spi_sampling()//unsigned  char *msb_shift,unsigned char *scnd_shift,unsigned char * lsb_shift
{
    //unsigned long int data_msb = 0;
    //unsigned long int data_scnd = 0;
    unsigned char data_msb_i = 0, data_scnd_i = 0;
  //  unsigned long int msb_shift_i = 0, scnd_shift_i = 0;
   signed int temp = 0; 
    signed long int data = 0;  
      
    CS = 1;
    delay_us(1);
    CS = 0;   
   
    
    data_msb_i = spi(0x55); 
    data_msb_i &= 0x1F;

   
    data_scnd_i = spi(0x55);
   
  
    data |= (((unsigned long int)data_msb_i) << 8); 
                       
    data |= (((unsigned long int)data_scnd_i));
    //  data |=  (data_lsb_i);      
    temp = 0x1FFF & data;
    if (temp & 0x1000)
    {
        temp = temp| 0xF000;
    }
    delay_us(1);
    CS = 1;
    //printf("msb %lu lsb %lu data %d\n",data_msb_i,data_scnd_i,temp);
    return temp;       
}
// External Interrupt 1 service routine
interrupt [EXT_INT1] void ext_int1_isr(void)
{
// Place your code here
    static char state = START_MEASUREMENT;//, refPulseCounter = 0;
     
    switch(state)
    {            
        case START_MEASUREMENT:
        if(measure_Q3_calib || measure_Q2_calib || accuracy_measurement)
        {
            TCCR0 = TIMER_ON;
            state = TIME_DETECT;   
            pulse_is_detected = 1;
            ref_sensor_pulse_measurement_started = 1; 
            ovf_timer0_cnt = 0;
            measure_Q3_calib_send_data = 0; 
            pulse_edge_cnt = 0;   
            pulse_duration_1 = 0;
           // ovf_timer0_cnt = 0;
        }   
        ref_sensor_pulse_measurement_stopped = 0; 
        break;
        case TIME_DETECT:
            pulse_duration_1 = (TCNT0*0.004 + ovf_timer0_cnt*1.024);//
            pulse_is_detected = 1;
            //pulse_duration_2 = 0;
            pulse_edge_cnt++;
            if(pulse_duration_1 >= 30000.0)
            {
                state = START_MEASUREMENT;
                ref_sensor_pulse_measurement_stopped = 1;
                if(measure_Q3_calib)
                {
                    measure_Q3_calib = 0;
                    measure_Q3_calib_send_data = 1;                
                } 
                if(measure_Q2_calib)
                {
                    measure_Q2_calib = 0;
                    measure_Q2_calib_send_data = 1;                
                }
                if(accuracy_measurement)
                {
                    accuracy_measurement = 0;
                    accuracy_measurement_send_data = 1;                
                }  
                TCCR0 = TIMER_OFF;  
            }
            else
                state = TIME_DETECT;
        break;
        /*case STOP_MEASUREMENT:   
            pulse_duration_2 = (TCNT0*0.004 + ovf_timer0_cnt*1.024);   
            ref_sensor_pulse_measurement_stopped = 1;
            //ref_sensor_pulse_measurement_started = 0; 
            ovf_timer0_cnt = 0;  
            TCCR0 = TIMER_OFF;    
            state = START_MEASUREMENT;  
            if(measure_Q3_calib)
            {
                measure_Q3_calib = 0;
                measure_Q3_calib_send_data = 1;                
            }
            break;
        */
    }
    
}
#define DATA_REGISTER_EMPTY (1<<UDRE)
#define RX_COMPLETE (1<<RXC)
#define FRAMING_ERROR (1<<FE)
#define PARITY_ERROR (1<<UPE)
#define DATA_OVERRUN (1<<DOR)

// USART Receiver buffer
#define RX_BUFFER_SIZE 250
char rx_buffer[RX_BUFFER_SIZE];

#if RX_BUFFER_SIZE <= 256
unsigned char rx_wr_index=0,rx_rd_index=0;
#else
unsigned int rx_wr_index=0,rx_rd_index=0;
#endif

#if RX_BUFFER_SIZE < 256
unsigned char rx_counter=0;
#else
unsigned int rx_counter=0;
#endif

// This flag is set on USART Receiver buffer overflow
bit rx_buffer_overflow;

// USART Receiver interrupt service routine
interrupt [USART_RXC] void usart_rx_isr(void)
{
char status,data;
status=UCSRA;
data=UDR;

if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
   {
   rx_buffer[rx_wr_index++]=data;  
   //LED_R = 1;
#if RX_BUFFER_SIZE == 256
   // special case for receiver buffer size=256
   if (++rx_counter == 0) rx_buffer_overflow=1;
#else
   if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
   if (++rx_counter == RX_BUFFER_SIZE)
      {
      rx_counter=0;
      rx_buffer_overflow=1;
      }
#endif
    if ((rx_buffer[rx_wr_index-1] == 0x04))
      {
         process_rx_buffer();
      }
   }
}

#ifndef _DEBUG_TERMINAL_IO_
// Get a character from the USART Receiver buffer
#define _ALTERNATE_GETCHAR_
#pragma used+
char getchar(void)
{
char data;
while (rx_counter==0);
data=rx_buffer[rx_rd_index++];
#if RX_BUFFER_SIZE != 256
if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
#endif
#asm("cli")
--rx_counter;
#asm("sei")
return data;
}
#pragma used-
#endif

// Timer 0 overflow interrupt service routine
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
// Place your code here
    
    ovf_timer0_cnt++;
}
// Timer1 output compare A interrupt service routine
interrupt [TIM1_COMPA] void timer1_compa_isr(void)
{
// Place your code here
float result = 0, num = 0;
unsigned long int temp = 0;

  if (db_changed)
  {         
     
    db_changed = 0;                
    
    
    num = (((float)(1/(float)(dbi_final*10))*1000000)/2)/TIMER_DIVIDER;
    //temp = (((float)(1/(float)(dbi_final*10))*1000000)/2)/TIMER_DIVIDER;
    //temp += 1;
    result = (num - floor(num) > 0.5) ? ceil(num) : floor(num);
    temp = (unsigned long int)result;
    
    OCR1AH= (temp & 0xFF00)>>8;
    OCR1AL= (temp & 0x00FF);
    //PORTB.2 = 1;   
    
  }

}

// Timer2 output compare interrupt service routine
interrupt [TIM2_COMP] void timer2_comp_isr(void)
{
 // Place your code here
 // Place your code here
    static char state=0,counter=0;     
 //char str[16];      
 //pulse generator procedure 80ms up 80ms lo 180ms idle     
        
 switch(state)
 {
    
    case 0:
        if( counter >= EP_MEASUREMENT -1 )   
        {            
            ep_positive_pulse_measurement = 0;
            sample_ready_flag = 1;
            state = 1;
        }    
        counter++;         
        break;
    case 1:
        if(sample_ready_flag == 1)  
        {
            //140- 20 - 5 
            state = 1;
            counter++;
                                    
          
                   
        }
        else 
       
        {   
            
            if(counter >= pulseWidth - SAMPLE_DURATION - CURRENT_SAMPLE_DURATION && counter <= pulseWidth - SAMPLE_DURATION - 1)
                current_sample_max = 1;
            else
                current_sample_max = 0;
            // 140-20 
            if(counter >= pulseWidth - SAMPLE_DURATION && counter <= pulseWidth - 1) // 30 - 5    
            {   
               read_max_samples = 1;
                
            }
            else
                read_max_samples = 0;
            counter++;
            if(counter == pulseWidth) //140
            {           
                counter=0;
                
                //LED = 1;
                //DIRECTION = 0;
                
                L298_I1=0;
                L298_I2=1;
                ep_negative_pulse_measurement = 1;
                state=2;
            }  
        }
    break;       
    //---------
    /*case 1:   
        counter++;   
        if(counter == REST_DURATION)
        {          
            counter=0;  
           
            //DIRECTION = 0;
            L298_I1=0; 
            L298_I2=1;  
            state=2;
        }
    break; 
    */
    //---------
    case 2:
        if(counter < EP_MEASUREMENT - 1)
        {
            ep_negative_pulse_measurement = 1;
        }                         
        else                      
            ep_negative_pulse_measurement = 0;
        if (counter < pulseWidth - SAMPLE_DURATION - CURRENT_SAMPLE_DURATION - 1)
            respose_uart_activity = 1;
        else
            respose_uart_activity = 0;         
        if(counter >= pulseWidth - SAMPLE_DURATION - CURRENT_SAMPLE_DURATION && counter <= pulseWidth - SAMPLE_DURATION - 1)
            current_sample_min = 1;
        else
            current_sample_min = 0; 
        if(counter >= pulseWidth - SAMPLE_DURATION  && counter <= pulseWidth - 1)
        {  
           read_min_samples = 1;
        }
        else
            read_min_samples = 0;
        counter++;
        if(counter == pulseWidth)
        {          
            counter=0;  
             
            //DIRECTION = 0;
            //LED = 0; 
            L298_I1=1; 
            ep_positive_pulse_measurement = 1;
            L298_I2 = 0;  
            //sample_ready_flag=1;
            pulseWidth = pulseWidthTemp;
            windowSize = windowSizeTemp; 
            state=0;
        }
    break;
    //---------
    case 3: 
   // if(counter == 1)
   //   sample_ready_flag=1;   
    counter++;
                       
    if(counter == REST_DURATION)
    {          
        counter=0; 
        
        L298_I1=1;    
        //DIRECTION = 1;
        L298_I2=0;   
       
        if(sample_ready_flag==0) 
        {
            state=0;
           
        }
    }
    break;
 } 
}


void process_rx_buffer()
{
   
    char i = 0;//,j = 0;
    while(rx_buffer[i] != 0x03)
        i++;    
    //    printf("i %d\n",i);    
    //    for(j = i; j < rx_wr_index; j++ )
    //        printf("%x,",rx_buffer[j]);  
            
    if (rx_buffer[i] == 3 && rx_buffer[rx_wr_index-1] == 4)
    {
        //LED_R =1;   
         switch (rx_buffer[i+1])
        {
            case 0x01:
                reade2prom1 = 1; 
                break;
            case 0x02:
                reade2prom2 = 1; 
                break;    
            case 0x03:
                offset_changed = 1;
                break;     
            case 0x05:
                measure_Q3_calib = 1;
                break;
            case 0x06:
                measure_Q2_calib = 1;
                break;   
            case 0x07:
                calibration_applied = 1;
                break;
            case 0x08:    
                calibration_changed = 1;
                break;  
            case 0x09:
                accuracy_measurement = 1;
                break;
            case 0x0a:
                wd_monitoring = 1;
                break;
            case 0x0b:
                wd_test = 1;
                break; 
            case 0x0c:
                serial_number_applied = 1;
                break;
            case 0x0D:
                cutt_off_changed = 1;
                break;
            case 0x0e:
                PulseWidthSettingApplied = 1;
                break;
            case 0x0f:
                start_fout_test = 1;
                break;
            case 0x10:
                stop_fout_test = 1;
                break;
            case 0x11:       
                zeroAdjusting = 1;  
                break;
            case 0x12:
                windowSizeChanged = 1;
                break; 
            case 0x13:
                ep_check_cmd = 1;
                break;
            case 0x14:
                ep_change_diff_samples_limit_flag = 1;
                break;
            case 0x15:
                ep_change_pulse_limit_flag = 1;
                break;  
            case 0x16:
                inverseSignCmd = 1;
                break;
            case 0x33:  
                startSendingDiffValues = 1;
                break;
            case 0x44:
                stopSendingDiffValues = 1; 
                break;
            case 0x88:    
                flewValueChanged = 1;
                break;
        }
    }
 }   
 

void send_f(float dataf)
{
        char send[50];
        //unsigned long int data; 
        char size = 0, i;
       // data = 6526521;
        //dataf = 4333.44;   
            
        send[0] = 0x03;
       // sprintf(send + 1,"%lu",data);
        sprintf(send + 1,"%4.3f",dataf);
        size = strlen(send);
            
        //printf("%u %lu\n",size,data); 
            
            
        send[size++] = 0x04;
      //  send[size++] = 10;                     
        for(i = 0; i < size; i++)
            putchar(send[i]);
}

void sendParamsFloat(float * send_arr, unsigned char element_cnt)
{
   char send[80];       
   char temp[20];
   char size = 0, i =0 , k = 0, cnt = 0;
  //send_f(min);
  i = 0; 
  send[0] = 0x03;
  //send[1] = element_cnt;
  i = 1;  
  for(cnt = 0; cnt < element_cnt; cnt++)
  {  
   //send[i++] = 3;
   sprintf(temp,"%4.3f",send_arr[cnt]);
   size = strlen(temp);          
   memcpy(send+i,temp,size);
   i += size;
   send[i++] = ',';
  }
  i--;                   
  send[i++] = 4;
   //send[i] = 10;
   //*/                     
   for(k = 0; k < i; k++)
      putchar(send[k]); 
}
void sendParamsMinMax(float * send_arr, unsigned char element_cnt)
{
   char send[80];       
   //char temp;
   char i =0 , k = 0, cnt = 0;
  //send_f(min);
  i = 0; 
  send[0] = 0x03;
  //send[1] = element_cnt;
  i = 1;  
  for(cnt = 0; cnt < element_cnt; cnt++)
  {  
   //send[i++] = 3;
   //sprintf(temp,"%4.3f",send_arr[cnt]);
   unsigned int *temp = (unsigned int *)(send_arr+cnt);
   //size = strlen(temp);          
   memcpy(send+i,temp,4);
   i += 4;//size;
   //send[i++] = ',';
  }
  //i++;                   
  send[i++] = 0x4;
   //send[i] = 10;
   //*/                     
   for(k = 0; k < i; k++)
      putchar(send[k]);
}
/*
void sendAckResponse()
{
    char send[5];
    char i;
         
    send[0] = 0x02;
    send[1] = 0xdd;
    send[2] = 0x04;
    for(i = 0; i < 3; i++)
        putchar(send[i]);
}
 */
void read_eeprom_values()
{
   //unsigned char idx = 0;
   //float data;           
   unsigned char addr = 0;
   unsigned char check_byte = eeprom_read_byte(0); 
   unsigned char pulseWidthCheckByte = eeprom_read_byte(PULSE_WIDTH_VALID);
   unsigned char winSizeCheckByte = eeprom_read_byte(WINDOW_SIZE_VALID_ADDR);    
   unsigned char ep_pulse_max_value_limit =  eeprom_read_byte(EP_PULSE_MAX_VALUE_LIMIT_VALID_ADDR);
   unsigned char ep_samples_limit =  eeprom_read_byte(EP_SAMPLES_LIMIT_ADDR);
   signed char signVal =  eeprom_read_byte(SIGN_VALID_ADDR);
  // eeprom_serial_num = eeprom_read_dword(SERIAL_ADDR);
   printf("check_byte %x pulseCheck %x\n",winSizeCheckByte,pulseWidthCheckByte);
   if(signVal != 0x55)
   {
        signValue = 1;
        eeprom_write_byte(SIGN_ADDR,signVal);
        printf("SIGN set to %d\n",signValue);
   }    
   else
   {     
        addr = SIGN_ADDR; 
        signValue = eeprom_read_byte(SIGN_ADDR);
        printf("SIGN set to default %d\n",signValue);
   }
   if(ep_pulse_max_value_limit != 0x55)
   {
      pulseMaxValuesLimit = EP_PULSE_MAX_VALUE_LIMIT;
      eeprom_write_byte(EP_PULSE_MAX_VALUE_LIMIT_ADDR,pulseMaxValuesLimit);
      printf("pulseMaxValuesLimitDefault %d\n",pulseMaxValuesLimit);
   }
   else
   {
     addr = EP_PULSE_MAX_VALUE_LIMIT_ADDR; 
     pulseMaxValuesLimit = eeprom_read_byte(addr);
     printf("pulseMaxValuesLimit %d\n",pulseMaxValuesLimit);
   }
   if(ep_samples_limit != 0x55)
   {
     diffSamplesLimit = EP_SAMPLES_LIMIT;
     eeprom_write_byte(EP_SAMPLES_LIMIT_ADDR,diffSamplesLimit);
     printf("diffSamplesLimit default %d\n",diffSamplesLimit);
   }
   else
   {
     addr = EP_SAMPLES_LIMIT_ADDR; 
     diffSamplesLimit = eeprom_read_byte(addr);
     printf("diffSamplesLimit %d\n",diffSamplesLimit); 
   }
   if(winSizeCheckByte != 0x55)  // check window size
   {    
     windowSize = SHIFT_DETERMINED_LENGTH;
     windowSizeTemp = SHIFT_DETERMINED_LENGTH;      
     eeprom_write_byte(WINDOW_SIZE_ADDR,windowSize);
     printf("win_size default %d\n",windowSize);
   }
   else
   {
     addr = WINDOW_SIZE_ADDR; 
     windowSize = eeprom_read_byte(addr);
     windowSizeTemp = windowSize;                                  
     printf("windowSize %d\n",windowSize);
   }                          
   
   if(pulseWidthCheckByte != 0x55)   // check pulse width
   {
      pulseWidth = PULSE_DURATION;
      pulseWidthTemp = PULSE_DURATION; 
      eeprom_write_byte(PULSE_WIDTH_ADDR,pulseWidth);
      
      printf("pulseWidth default %d\n",pulseWidth);  
   }
   else
   {     
     addr = PULSE_WIDTH_ADDR;  
     pulseWidth = eeprom_read_byte(addr); 
     pulseWidthTemp = pulseWidth;        
     addr = WINDOW_SIZE_ADDR;            
     
     printf("pulseWidth %d \n",pulseWidth);  
   }
   if (check_byte != 0xBB)
   {
    offset = 0;
    dbi_added_value = 0;
   // element_cnt_read = 0;
    gain = 0;
    //send_f(offset);
    //send_f(gain);
    //send(element_cnt_read);  
    eeprom_serial_num = SERIAL_NUMBER;
    eeprom_write_dword(SERIAL_ADDR,SERIAL_NUMBER);
    
    cutt_off = CUTT_OFF; 
    eeprom_write_float(CUTT_OFF_ADDR, cutt_off);
    printf("gain %4.3f offset %4.3f serial %ld cutt_off %4.3f\n",gain,offset,eeprom_serial_num,cutt_off);   
    return;
   }
   addr = GAIN_ADDR;
   gain = eeprom_read_float(addr);
    
   addr = OFFSET_ADDR;      
   offset = eeprom_read_float(addr); 
   
   addr = SERIAL_ADDR;  
   eeprom_serial_num = eeprom_read_dword(addr);
   
   addr = CUTT_OFF_ADDR; 
   cutt_off = eeprom_read_float(addr); 
   
   printf("gain %4.3f offset %4.3f %lu cutt %4.3f\n",gain,offset,eeprom_serial_num,cutt_off);
  
}
void init(void)
{
    // Input/Output Ports initialization
    // Port A initialization
    // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
    DDRA=(1<<DDA7) | (1<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (1<<DDA2) | (1<<DDA1) | (0<<DDA0);
    // State: Bit7=0 Bit6=0 Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
    PORTA=(0<<PORTA7) | (0<<PORTA6) | (1<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

    // Port B initialization      
    //DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);    
    // Function: Bit7=Out Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In 
    DDRB=(1<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
    // State: Bit7=0 Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T 
    PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

    // Port C initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In 
    DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (1<<DDC4) | (1<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
    // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T 
    PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

    // Port D initialization
    // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=In 
    DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
    // State: Bit7=0 Bit6=0 Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=T 
    PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

    // Timer/Counter 0 initialization
    // Clock source: System Clock
    // Clock value: Timer 0 Stopped
    // Mode: Normal top=0xFF
    // OC0 output: Disconnected
    TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
    TCNT0=0x00;
    OCR0=0x00;

    // Timer/Counter 1 initialization
    // Clock source: System Clock
    // Clock value: 187.500 kHz
    // Mode: Fast PWM top=OCR1A
    // OC1A output: Inverted PWM
    // OC1B output: Disconnected
    // Noise Canceler: Off
    // Input Capture on Falling Edge
    // Timer Period: 2.9547 ms
    // Output Pulse(s):
    // OC1A Period: 2.9547 ms Width: 0 us
    // Timer1 Overflow Interrupt: Off
    // Input Capture Interrupt: Off
    // Compare A Match Interrupt: On
    // Compare B Match Interrupt: Off
    TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (1<<WGM10);
    TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);      //(0<<CS12) | (1<<CS11) | (1<<CS10)
    TCNT1H=0x00;
    TCNT1L=0x00;
    ICR1H=0x00;
    ICR1L=0x00;
    OCR1AH=0x02;
    OCR1AL=0x29;
    OCR1BH=0x00;
    OCR1BL=0x00;
  
    // Timer/Counter 2 initialization
    // Clock source: System Clock
    // Clock value: 187.500 kHz
    // Mode: CTC top=OCR2A
    // OC2 output: Disconnected
    // Timer Period: 1.0027 ms
    /*
    ASSR=0<<AS2;
    TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);
    TCNT2=0x00;
    OCR2=0xFB;
    */

    // Timer(s)/Counter(s) Interrupt(s) initialization
    TIMSK=(1<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);

    // External Interrupt(s) initialization
    // INT0: Off
    // INT1: On
    // INT1 Mode: Rising Edge
    // INT2: Off
    GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
    MCUCR=(1<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
    MCUCSR=(0<<ISC2);
    GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);

    // USART initialization
    // Communication Parameters: 8 Data, 1 Stop, No Parity
    // USART Receiver: On
    // USART Transmitter: On
    // USART Mode: Asynchronous
    // USART Baud Rate: 9600
    UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
    UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
    UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
    UBRRH=0x00;
    UBRRL=0x69;//0x67 75600

    // Analog Comparator initialization
    // Analog Comparator: Off
    // The Analog Comparator's positive input is
    // connected to the AIN0 pin
    // The Analog Comparator's negative input is
    // connected to the AIN1 pin
    ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
    SFIOR=(0<<ACME);

    // ADC initialization
    // ADC disabled   
    ADMUX= 0;
    ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);

#ifdef SPI_MAN
    // SPI initialization
    // SPI disabled
    SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
#else    
   // SPI initialization
    // SPI Type: Master
    // SPI Clock Rate: 93.750 kHz
    // SPI Clock Phase: Cycle Start
    // SPI Clock Polarity: Low
    // SPI Data Order: MSB First
    SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (1<<SPR1) | (1<<SPR0); 
    SPSR=(0<<SPI2X);
#endif

    // TWI initialization
    // TWI disabled
    TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

    // Global enable interrupts
    #asm("sei") 
    L298_EN = 1;
    EMPTY_PIPE = 1;    
    //L298_I1 = 1;
}
void enable_watchdog()
{
    // Watchdog Timer initialization
    // Watchdog Timer Prescaler: OSC/2048k
    WDTCR=(0<<WDTOE) | (1<<WDE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
}
void time2_init()
{
     // Timer/Counter 2 initialization
    // Clock source: System Clock
    // Clock value: 187.500 kHz
    // Mode: CTC top=OCR2A
    // OC2 output: Disconnected
    // Timer Period: 1.0027 ms
    ASSR=0<<AS2;
    TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (1<<CTC2) | (1<<CS22) | (0<<CS21) | (0<<CS20);//(1<<CS22) | (0<<CS21) | (0<<CS20);
    TCNT2=0x00;
    OCR2=0xFE;//0xFB;//0xFE

}